{
  "version": 3,
  "sources": ["../../../../../../node_modules/@capacitor/barcode-scanner/dist/esm/utils.js", "../../../../../../node_modules/@capacitor/barcode-scanner/dist/esm/index.js"],
  "sourcesContent": ["/**\n * Predefined CSS rules for styling barcode scanner components.\n * Each object in the array defines a CSS rule, with a selector and the CSS properties to apply.\n */\nexport const barcodeScannerCss = [{\n  selector: '.scanner-container-display',\n  css: 'display: block;'\n}, {\n  selector: '.scanner-dialog',\n  css: 'display: none; position: fixed; z-index: 999; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.4);'\n}, {\n  selector: '.scanner-dialog-inner',\n  css: 'background-color: #fefefe; margin: 2% auto; padding: 20px; border: 1px solid #888; width: 96%;'\n}, {\n  selector: '.close-button',\n  css: 'color: #aaa; float: right; font-size: 28px; font-weight: bold; cursor: pointer;'\n}, {\n  selector: '.close-button:hover',\n  css: 'color: #222;'\n}, {\n  selector: '.scanner-container-full-width',\n  css: 'width: 100%;'\n}];\n/**\n * Dynamically applies a set of CSS rules to the document.\n * If a custom style element with a specific ID does not exist, it is created and appended to the document's head.\n * Existing rules in the style element are cleared before new ones are applied.\n * This function supports both modern and older browsers by using `CSSStyleSheet.insertRule` and `textContent` respectively.\n *\n * @param {Array<{selector: string, css: string}>} cssRules - An array of objects containing CSS selectors and styles to apply.\n */\nexport function applyCss(cssRules) {\n  const styleId = 'custom-style-os-cap-barcode'; // Unique identifier for the style element.\n  let styleElement = document.getElementById(styleId);\n  if (!styleElement) {\n    // Create and append a new style element if it does not exist.\n    styleElement = document.createElement('style');\n    styleElement.type = 'text/css';\n    styleElement.id = styleId;\n    document.head.appendChild(styleElement);\n  }\n  if (styleElement.sheet) {\n    // Clear existing CSS rules.\n    while (styleElement.sheet.cssRules.length) {\n      styleElement.sheet.deleteRule(0);\n    }\n    // Insert new CSS rules.\n    for (const {\n      selector,\n      css\n    } of cssRules) {\n      styleElement.sheet.insertRule(`${selector} { ${css} }`);\n    }\n  } else {\n    // Fallback for older browsers using textContent.\n    styleElement.textContent = '';\n    for (const {\n      selector,\n      css\n    } of cssRules) {\n      styleElement.textContent += `${selector} { ${css} }`;\n    }\n  }\n}\n", "import { registerPlugin } from '@capacitor/core';\nimport { CapacitorBarcodeScannerCameraDirection, CapacitorBarcodeScannerScanOrientation } from './definitions'; // Importing the interface for type checking.\nimport { applyCss, barcodeScannerCss } from './utils'; // Import utilities for applying CSS.\n/**\n * Registers the `OSBarcode` plugin with Capacitor.\n * For web platforms, it applies necessary CSS for the barcode scanner and dynamically imports the web implementation.\n * This allows for lazy loading of the web code only when needed, optimizing overall bundle size.\n */\nconst CapacitorBarcodeScannerImpl = registerPlugin('CapacitorBarcodeScanner', {\n  web: () => {\n    applyCss(barcodeScannerCss); // Apply the CSS styles necessary for the web implementation of the barcode scanner.\n    return import('./web').then(m => new m.CapacitorBarcodeScannerWeb()); // Dynamically import the web implementation and instantiate it.\n  }\n});\nclass CapacitorBarcodeScanner {\n  static async scanBarcode(options) {\n    options.scanInstructions = options.scanInstructions || ' '; // Ensure scanInstructions is at least a space.\n    options.scanButton = options.scanButton || false; // Set scanButton to false if not provided.\n    options.scanText = options.scanText || ' '; // Ensure scanText is at least a space.\n    options.cameraDirection = options.cameraDirection || CapacitorBarcodeScannerCameraDirection.BACK; // Set cameraDirection to 'BACK' if not provided.\n    options.scanOrientation = options.scanOrientation || CapacitorBarcodeScannerScanOrientation.ADAPTIVE; // Set scanOrientation to 'ADAPTIVE' if not provided.\n    return CapacitorBarcodeScannerImpl.scanBarcode(options);\n  }\n}\nexport { CapacitorBarcodeScanner }; // Export the `CapacitorBarcodeScanner` class.\nexport * from './definitions'; // Re-export all exports from the definitions file.\n"],
  "mappings": ";;;;;;;;;;;;;;;AAIO,IAAM,oBAAoB,CAAC;AAAA,EAChC,UAAU;AAAA,EACV,KAAK;AACP,GAAG;AAAA,EACD,UAAU;AAAA,EACV,KAAK;AACP,GAAG;AAAA,EACD,UAAU;AAAA,EACV,KAAK;AACP,GAAG;AAAA,EACD,UAAU;AAAA,EACV,KAAK;AACP,GAAG;AAAA,EACD,UAAU;AAAA,EACV,KAAK;AACP,GAAG;AAAA,EACD,UAAU;AAAA,EACV,KAAK;AACP,CAAC;AASM,SAAS,SAAS,UAAU;AACjC,QAAM,UAAU;AAChB,MAAI,eAAe,SAAS,eAAe,OAAO;AAClD,MAAI,CAAC,cAAc;AAEjB,mBAAe,SAAS,cAAc,OAAO;AAC7C,iBAAa,OAAO;AACpB,iBAAa,KAAK;AAClB,aAAS,KAAK,YAAY,YAAY;AAAA,EACxC;AACA,MAAI,aAAa,OAAO;AAEtB,WAAO,aAAa,MAAM,SAAS,QAAQ;AACzC,mBAAa,MAAM,WAAW,CAAC;AAAA,IACjC;AAEA,eAAW;AAAA,MACT;AAAA,MACA;AAAA,IACF,KAAK,UAAU;AACb,mBAAa,MAAM,WAAW,GAAG,QAAQ,MAAM,GAAG,IAAI;AAAA,IACxD;AAAA,EACF,OAAO;AAEL,iBAAa,cAAc;AAC3B,eAAW;AAAA,MACT;AAAA,MACA;AAAA,IACF,KAAK,UAAU;AACb,mBAAa,eAAe,GAAG,QAAQ,MAAM,GAAG;AAAA,IAClD;AAAA,EACF;AACF;;;ACvDA,IAAM,8BAA8B,eAAe,2BAA2B;AAAA,EAC5E,KAAK,MAAM;AACT,aAAS,iBAAiB;AAC1B,WAAO,OAAO,mBAAO,EAAE,KAAK,OAAK,IAAI,EAAE,2BAA2B,CAAC;AAAA,EACrE;AACF,CAAC;AACD,IAAM,0BAAN,MAA8B;AAAA,EAC5B,OAAa,YAAY,SAAS;AAAA;AAChC,cAAQ,mBAAmB,QAAQ,oBAAoB;AACvD,cAAQ,aAAa,QAAQ,cAAc;AAC3C,cAAQ,WAAW,QAAQ,YAAY;AACvC,cAAQ,kBAAkB,QAAQ,mBAAmB,uCAAuC;AAC5F,cAAQ,kBAAkB,QAAQ,mBAAmB,uCAAuC;AAC5F,aAAO,4BAA4B,YAAY,OAAO;AAAA,IACxD;AAAA;AACF;",
  "names": []
}
